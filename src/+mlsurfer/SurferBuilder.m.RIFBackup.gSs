classdef SurferBuilder < mlfourd.ImageBuilder
	%% SURFERBUILDER is a builder design pattern for Freesurfer%  Version $Revision: 2300 $ was created $Date: 2012-12-09 19:54:45 -0600 (Sun, 09 Dec 2012) $ by $Author: jjlee $,  
 	%  last modified $LastChangedDate: 2012-12-09 19:54:45 -0600 (Sun, 09 Dec 2012) $ and checked into svn repository $URL: file:///Users/jjlee/Library/SVNRepository_2012sep1/mpackages/mlsurfer/src/+mlsurfer/trunk/SurferBuilder.m $ 
 	%  Developed on Matlab 7.13.0.564 (R2011b) 
 	%  $Id: SurferBuilder.m 2300 2012-12-10 01:54:45Z jjlee $ 
 	%  N.B. classdef (Sealed, Hidden, InferiorClasses = {?class1,?class2}, ConstructOnLoad) 

	properties (Dependent)
        freesurferHome
        surferPath
        surferFolder
        mrPath
        mrFolder
        target3DAnat
        indices3DAnat
    end 

    methods (Static)
        function this   = createFromMrPath(pth)
            %% CREATEFROMMRPATH
            %  Usage: 
            
            this = mlsurfer.SurferBuilder(pth);
        end
        function this   = createFromSurferPath(pth)
            %% CREATEFROMSURFERPATH
            %  Usage:  
            
            assert(lexist(pth, 'dir'));
            this = mlsurfer.SurferBuilder(fileparts(pth));
        end
        function this   = createFromConverter(cvtr)
            %% CREATEFROMCONVERTER
            %  Usage:  
            
            this = mlsurfer.SurferBuilder(cvtr.modalityPath);
        end
    end % static methods
    
	methods
        function hom  = get.freesurferHome(this) %#ok<MANU>
            [~,hom] = mlbash('echo $FREESURFER_HOME');
            hom = strtrim(hom);
        end
        function this = set.surferPath(this, pth)
            assert(lexist(pth, 'dir'));
            this.subjectPath_ = pth;
        end
        function pth  = get.surferPath(this)
            pth = this.subjectPath_;
            assert(lexist(pth, 'dir'));
        end
        function nam  = get.surferFolder(this)
            nam = ['surfer_' this.sessionFolder];
        end
        function pth  = get.mrPath(this)
            pth = this.modalityPath;
        end
        function fld  = get.mrFolder(this)
            [~,fld] = fileparts(this.mrPath);
        end
        function targ = get.target3DAnat(this)
            targ = cell(1, length(this.indices3DAnat_));
            for t = 1:length(targ)
                targ{t} = fullfile(this.mrPath, 'unpack', '3danat', this.indices3DAnat_{t}, [this.indices3DAnat_{t} '.mgz']);
            end
        end
        function this = set.indices3DAnat(this, ids)
            assert(~isempty(ids));
            if (1 == length(ids) || ischar(ids))
                this = this.setIndex3DAnat(ids);
            else
                this = this.setIndices3DAnat(ids);
            end
        end
        function ids  = get.indices3DAnat(this) 
            assert(~isempty(this.indices3DAnat_));
            ids = this.indices3DAnat_;           
        end
                
        function [s,r]  = surferBash(this, cmdlin, varargin)
            %% SURFERBASH wraps mlbash with the shell environment required by freesurfer
            
            p = inputParser;
            addRequired(p, 'cmdlin', @ischar);
            addOptional(p, 'logfile', '', @ischar);
            parse(p, cmdlin, varargin{:});
            
            import mlsurfer.*;
            assert(lexist(this.surferPath, 'dir'));
            if (isempty(p.Results.logfile))
                logfile = this.logFqFilename(SurferBuilder.lastCmd(cmdlin));
            end
            r = '';
            try
                cmdlin = this.ensureSurferCmd(cmdlin);
                [s,r] = mlbash(cmdlin, true, true, logfile);
                   r  = checkReturnOf(s,r);
            catch ME
                handexcept(ME,r);
            end
        end
        function cmdlin = ensureSurferCmd(this, cmdlin)
            if (~lstrfind(cmdlin, 'SUBJECTS_DIR'))
                cmdlin = sprintf('export SUBJECTS_DIR=%s; %s', this.surferPath, cmdlin);
            end
            if (~lstrfind(cmdlin, 'SetupFreesurfer'))
                cmdlin = sprintf('source %s; %s', fullfile(this.freesurferHome, 'SetupFreesurfer.sh'), cmdlin);
            end
        end        
        function fqfn   = logFqFilename(this, str)
            fqfn = this.ensureFullyQualified( ...
                   mlfourd.NamingRegistry.instance.logFilename(str));            
        end
        function fqfn   = ensureFullyQualified(this, str)
            [~,f,e] = fileparts(str);
            fqfn = fullfile(this.surferPath, [f e]);
        end
        
        function        unpack3DAnatMgz(this)
            dcmdir  = this.converter.dicomPath;
            targdir = fullfile(this.mrPath, 'unpack', '');
            runs    = '';
            for r = 1:length(this.indices3DAnat_)
                runs = sprintf('%s -run %u 3danat mgz 001.mgz ', runs, str2double(this.indices3DAnat_{r})); 
            end
            mlsurfer.SurferBuilder.surferBash( ...
                sprintf('unpacksdcmdir -src %s -targ %s -fsfast %s', ...
                         dcmdir, targdir, runs));
        end
        function        reconAll(this, ids)
            %% RECONALL
            %  Usage:  obj.reconAll(indices_3D_anatomy)
            %                       ^
            
            if (exist('ids','var')); 
                this.indices3DAnat = ids; 
            end
            inputs = '';
            for a = 1:length(this.indices3DAnat)
                inputs = sprintf('%s -i unpack/3danat/%s/001.mgz ', inputs, this.indices3DAnat{a});
            end
            mlsurfer.SurferBuilder.surferBash( ...
                sprintf('recon-all -s %s %s -all', this.surferFolder, inputs));
        end        
    end 
    
    %% PROTECTED
    
    methods
 		function this = SurferBuilder(mrPth) 
 			%% SURFERBUILDER 
 			%  Usage:  cf. ImageBuilder baseclass
            
            assert(lexist(mrPth, 'dir'));
            [~,mriFld] = fileparts(mrPth);
            assert(lstrfind(mlfourd.AbstractDicomConverter.modalityFolders, mriFld));
            this = this@mlfourd.ImageBuilder(mrPth);
 		end % SurferBuilder (ctor)
    end
    
    %% PRIVATE
    
    properties (Access = 'private')
        subjectPath_
        indices3DAnat_
    end

    methods (Static, Access = 'private')
        function cmdlin = lastCmd(cmdlin)
            locs = strfind(cmdlin, '; ');
            if (~isempty(locs))
                loc = locs(length(locs));
                cmdlin = cmdlin(loc+2:end);
            end
        end
    end
    
    methods (Access = 'private')
        function this = setIndices3DAnat(this, ids)
            if (isnumeric(ids))
                ids = num2cell(ids);
            end
            this.indices3DAnat_ = cell(1,length(ids));
            for a = 1:length(ids)
                this.indices3DAnat_{a} = this.index3DAnat2str(ids{a});
            end
        end
        function this = setIndex3DAnat(this, idx)
            this.indices3DAnat_ = ensureCell(this.index3DAnat2str(idx));
        end
        function str  = index3DAnat2str(this, idx)
            if (isnumeric(idx))
                str = sprintf('%03u', idx);
            elseif (ischar(idx))
                assert(3 == length(idx));
                str = idx;
            elseif (iscell(idx))
                assert(1 == length(idx));
                str = this.index3DAnat2str(idx{1});
            end
        end        
    end
	%  Created with Newcl by John J. Lee after newfcn by Frank Gonzalez-Morphy 
end

